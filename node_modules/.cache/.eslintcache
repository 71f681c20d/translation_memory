[{"/Users/alexander/Desktop/translation_memory/src/index.tsx":"1","/Users/alexander/Desktop/translation_memory/src/reportWebVitals.ts":"2","/Users/alexander/Desktop/translation_memory/src/App.tsx":"3","/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/TranslationMemory.tsx":"4","/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/EndGame/EndGame.tsx":"5","/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/InGame/InGame.tsx":"6","/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/NewGame/NewGame.tsx":"7","/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/NewGame/DocumentUploader.tsx":"8","/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/EndGame/GameStats.tsx":"9"},{"size":554,"mtime":1678252081564,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1678252081565,"results":"12","hashOfConfig":"11"},{"size":224,"mtime":1678263814101,"results":"13","hashOfConfig":"11"},{"size":1879,"mtime":1678280626154,"results":"14","hashOfConfig":"11"},{"size":1282,"mtime":1678277377415,"results":"15","hashOfConfig":"11"},{"size":3972,"mtime":1678967812075,"results":"16","hashOfConfig":"11"},{"size":835,"mtime":1678280653852,"results":"17","hashOfConfig":"11"},{"size":1515,"mtime":1679029862399,"results":"18","hashOfConfig":"11"},{"size":1228,"mtime":1678278442960,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"1bhexmz",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/alexander/Desktop/translation_memory/src/index.tsx",[],[],[],"/Users/alexander/Desktop/translation_memory/src/reportWebVitals.ts",[],[],"/Users/alexander/Desktop/translation_memory/src/App.tsx",[],[],"/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/TranslationMemory.tsx",[],[],"/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/EndGame/EndGame.tsx",[],[],"/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/InGame/InGame.tsx",["50","51","52"],[],"import React, { useContext, useEffect, useState } from \"react\";\nimport Phrase from \"../../../Models/Phrase\";\nimport { translationMemoryContext } from \"../TranslationMemory\";\n\nconst InGame = () => {\n\n  const translationMemoryStore = useContext(translationMemoryContext);\n  const setCurrentPage = translationMemoryStore?.setCurrentPage;\n  const phrases = translationMemoryStore?.phrases;\n  const setStartTime = translationMemoryStore?.setStartTime;\n  const incorrectCount = translationMemoryStore?.incorrectCount as number;\n  const setIncorrectCount = translationMemoryStore?.setIncorrectCount as Function;\n\n  const [reveal, setReveal] = React.useState<Boolean>(false);\n  const [remainingPhrases, setRemainingPhrases] = React.useState<Phrase[]>(JSON.parse(JSON.stringify(phrases as Phrase[]))); // deep copy\n  const [currentIndex, setCurrentIndex] = React.useState<number>(0);\n\n  useEffect(() => {\n    setStartTime ? setStartTime(new Date()) : console.error('Unable to set start time');\n  }, []);\n\n  const [translatedInput, setTranslatedInput] = useState<string>('');\n\n  const handleReveal = (event: any) => {\n    console.log('Revealing translation');\n    setReveal(!reveal);\n  }\n\n  const handleIncorrect = (event: any) => {\n    console.log('Incorrect translation');\n    setIncorrectCount(incorrectCount + 1);\n    // Load the next phrase\n    nextPhrase();\n  }\n\n  const handleCorrect = (event: any) => {\n    console.log('Correct translation');\n    // If the user gets it correct, then delete that phrase from RemainingPhrases\n    let tempPhrases: Phrase[] = remainingPhrases;\n    tempPhrases.splice(currentIndex, 1);\n    setRemainingPhrases(tempPhrases);\n    // Load the next phrase\n    nextPhrase();\n  }\n\n  const nextPhrase = () => {\n    // clear form\n    setTranslatedInput('');\n    // check if there are any more phrases\n    if (remainingPhrases?.length === 0) {\n      setCurrentPage ? setCurrentPage('end_game') : console.error('There are no more phrases left');\n    }\n    // Randomly select a new index for the phrase array\n    const index = Math.floor(Math.random() * remainingPhrases.length);\n    console.log('index: ' + index)\n    setCurrentIndex(index);\n    setReveal(false);\n  }\n\n  const handleChange = (event: any) => {\n    setTranslatedInput(event.target.value.toString())\n  }\n\n  useEffect(() => {\n    nextPhrase();\n  }, []);\n\n\n\n  return (\n    <>\n      <div id=\"in_game\">\n        <p id=\"instructions\" style={{ fontSize: 20, color: \"blue\", textDecorationLine: \"underline\", fontStyle: \"italic\"}}>\n          Write the translation with correct spelling:\n        </p>\n        <p id=\"english_text\" style={{ fontSize: 40, color: \"black\", fontWeight: \"bold\"}}>\n          {remainingPhrases[currentIndex]?.english_text}\n        </p>\n        \n        <form>\n          <label>\n            Translated Input:\n            <input type=\"text\" name=\"translated_text_input\" onChange={handleChange} value={translatedInput}/>\n          </label><br/>\n          {/* <input type=\"submit\" /> */}\n        </form>\n        <br/>\n        <button id=\"reveal\" onClick={handleReveal} style={{ background: \"blue\", fontWeight: \"bold\"}}>\n          Reveal Translation\n        </button>\n        {reveal &&\n          <div id=\"revealable_component\">\n            <p id=\"translated_text\" style={{ fontSize: 45, color: \"black\", fontWeight: \"bold\"}}>\n              {remainingPhrases[currentIndex]?.translation}\n            </p>\n            <p id=\"input_results\">\n              Your input was: {translatedInput==remainingPhrases[currentIndex]?.translation? 'Correct': 'Incorrect'}\n            </p>\n            <div>\n              <button id=\"incorrect_button\" onClick={handleIncorrect} style={{ background: \"red\"}}>\n                Incorrect\n              </button>\n              <button id=\"correct_button\" onClick={handleCorrect} style={{ background: \"green\"}}>\n                Correct\n              </button>\n            </div>\n          </div>\n        }\n      </div>\n    </>\n  )\n}\n\nexport default InGame","/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/NewGame/NewGame.tsx",[],[],"/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/NewGame/DocumentUploader.tsx",["53","54"],[],"import Papa from \"papaparse\";\nimport React, { useContext } from \"react\";\nimport Phrase from \"../../../Models/Phrase\";\nimport { translationMemoryContext } from \"../TranslationMemory\";\n\n\nconst DocumentUploader = () => {\n\n  const translationMemoryStore = useContext(translationMemoryContext);\n  const setPhrases = translationMemoryStore?.setPhrases;\n\n  const changeHandler = (event: any) => {\n    console.log(event.target.files[0]);\n    parseCsv(event);\n  };\n\n  const parseCsv = (event: any) => {\n    let phrases: Phrase[] = [];\n    // Passing file data (event.target.files[0]) to parse using Papa.parse\n    Papa.parse(event.target.files[0], {\n      header: true,\n      skipEmptyLines: true,\n      complete: function (results: { data: any; }) {\n        const allPhrases: Phrase[] = results.data;\n        let filteredPhrases: Phrase[] = [];\n        // filter allPhrases based on the 'included' field in the CSV; exclude if it says FALSE\n        for(let phrase of allPhrases){\n          if(phrase.included != 'FALSE'){\n            filteredPhrases.push(phrase);\n          }\n        }\n        console.log(filteredPhrases);\n        setPhrases? setPhrases(filteredPhrases): console.error('Unable to initialize uploaded phrases');\n      },\n    });\n  }\n\n\n  return (\n    <>\n    <div>\n    <input\n          type=\"file\"\n          name=\"file\"\n          accept=\".csv\"\n          onChange={changeHandler}\n          style={{ display: \"block\", margin: \"10px auto\" }}\n        />\n    </div>\n    </>\n  )\n}\n\nexport default DocumentUploader;","/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/EndGame/GameStats.tsx",[],[],{"ruleId":"55","severity":1,"message":"56","line":20,"column":6,"nodeType":"57","endLine":20,"endColumn":8,"suggestions":"58"},{"ruleId":"55","severity":1,"message":"59","line":66,"column":6,"nodeType":"57","endLine":66,"endColumn":8,"suggestions":"60"},{"ruleId":"61","severity":1,"message":"62","line":97,"column":47,"nodeType":"63","messageId":"64","endLine":97,"endColumn":49},{"ruleId":"65","severity":1,"message":"66","line":18,"column":9,"nodeType":"67","messageId":"68","endLine":18,"endColumn":26},{"ruleId":"61","severity":1,"message":"69","line":28,"column":30,"nodeType":"63","messageId":"64","endLine":28,"endColumn":32},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setStartTime'. Either include it or remove the dependency array.","ArrayExpression",["70"],"React Hook useEffect has a missing dependency: 'nextPhrase'. Either include it or remove the dependency array.",["71"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'phrases' is assigned a value but never used.","Identifier","unusedVar","Expected '!==' and instead saw '!='.",{"desc":"72","fix":"73"},{"desc":"74","fix":"75"},"Update the dependencies array to be: [setStartTime]",{"range":"76","text":"77"},"Update the dependencies array to be: [nextPhrase]",{"range":"78","text":"79"},[990,992],"[setStartTime]",[2330,2332],"[nextPhrase]"]