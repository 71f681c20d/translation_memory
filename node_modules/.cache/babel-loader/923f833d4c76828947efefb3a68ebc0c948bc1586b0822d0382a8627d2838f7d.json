{"ast":null,"code":"var _jsxFileName = \"/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/TranslationMemory.tsx\",\n  _s = $RefreshSig$();\nimport react from \"react\";\nimport EndGame from \"./EndGame/EndGame\";\nimport InGame from \"./InGame/InGame\";\nimport NewGame from \"./NewGame/NewGame\";\n\n/**\n * This component is the root component for the Translation Memory Game\n * There are 3 possible pages/states: new_game, in_game, and end_game\n * Each of these states has a corresponding component\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const translationMemoryContext = /*#__PURE__*/react.createContext({});\nconst TranslationMemory = () => {\n  _s();\n  const [currentPage, setCurrentPage] = react.useState('new_game');\n  const [phrases, setPhrases] = react.useState([]);\n  const [currentPhrase, setCurrentPhrase] = react.useState({});\n  const gameStateMap = new Map();\n  gameStateMap.set('new_game', /*#__PURE__*/_jsxDEV(NewGame, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 32\n  }, this));\n  gameStateMap.set('in_game', /*#__PURE__*/_jsxDEV(InGame, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 31\n  }, this));\n  gameStateMap.set('end_game', /*#__PURE__*/_jsxDEV(EndGame, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 32\n  }, this));\n  const printGameState = () => {\n    // For the purposes of debugging\n    console.log(JSON.stringify(phrases));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(translationMemoryContext.Provider, {\n      value: {\n        currentPage,\n        setCurrentPage,\n        phrases,\n        setPhrases,\n        currentPhrase,\n        setCurrentPhrase\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          onClick: printGameState,\n          children: \"The Phrase Translation Memory Game\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"game_state\",\n        children: gameStateMap.get(currentPage)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(TranslationMemory, \"BdcUGnRrqik9lZXCtybzacejTNA=\");\n_c = TranslationMemory;\nexport default TranslationMemory;\nvar _c;\n$RefreshReg$(_c, \"TranslationMemory\");","map":{"version":3,"names":["react","EndGame","InGame","NewGame","jsxDEV","_jsxDEV","Fragment","_Fragment","translationMemoryContext","createContext","TranslationMemory","_s","currentPage","setCurrentPage","useState","phrases","setPhrases","currentPhrase","setCurrentPhrase","gameStateMap","Map","set","fileName","_jsxFileName","lineNumber","columnNumber","printGameState","console","log","JSON","stringify","children","Provider","value","onClick","id","get","_c","$RefreshReg$"],"sources":["/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/TranslationMemory.tsx"],"sourcesContent":["import react, { ReactNode } from \"react\";\nimport { JsxElement } from \"typescript\";\nimport Phrase from \"../../Models/Phrase\";\nimport EndGame from \"./EndGame/EndGame\";\nimport InGame from \"./InGame/InGame\";\nimport DocumentUploader from \"./NewGame/DocumentUploader\";\nimport NewGame from \"./NewGame/NewGame\";\n\n/**\n * This component is the root component for the Translation Memory Game\n * There are 3 possible pages/states: new_game, in_game, and end_game\n * Each of these states has a corresponding component\n */\n\nexport type GameState = {\n  currentPage?: string,\n  setCurrentPage?: Function,\n  phrases?: Phrase[],\n  setPhrases?: Function,\n  currentPhrase?: Phrase,\n  setCurrentPhrase?: Function,\n}\n\n\nexport const translationMemoryContext = react.createContext<GameState>({});\n\nconst TranslationMemory = () => {\n  \n  const [currentPage, setCurrentPage] = react.useState<string>('new_game');\n  const [phrases, setPhrases] = react.useState<Phrase[]>([]);\n  const [currentPhrase, setCurrentPhrase] = react.useState<Phrase>({} as Phrase);\n  \n\n  const gameStateMap = new Map<string, ReactNode>();\n  gameStateMap.set('new_game', <NewGame />);\n  gameStateMap.set('in_game', <InGame />);\n  gameStateMap.set('end_game', <EndGame />);\n\n  const printGameState = () => {\n    // For the purposes of debugging\n    console.log(JSON.stringify(phrases));\n  }\n\n  return (\n    <>\n      <translationMemoryContext.Provider\n        value={{\n          currentPage, setCurrentPage,\n          phrases, setPhrases,\n          currentPhrase, setCurrentPhrase,\n        }}>\n          <header>\n            <h1 onClick={printGameState}>\n              The Phrase Translation Memory Game\n            </h1>\n          </header>\n        <div id=\"game_state\">\n          {gameStateMap.get(currentPage)}\n        </div>\n      </translationMemoryContext.Provider>\n    </>\n\n  )\n}\n\nexport default TranslationMemory;"],"mappings":";;AAAA,OAAOA,KAAK,MAAqB,OAAO;AAGxC,OAAOC,OAAO,MAAM,mBAAmB;AACvC,OAAOC,MAAM,MAAM,iBAAiB;AAEpC,OAAOC,OAAO,MAAM,mBAAmB;;AAEvC;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAgBA,OAAO,MAAMC,wBAAwB,gBAAGR,KAAK,CAACS,aAAa,CAAY,CAAC,CAAC,CAAC;AAE1E,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE9B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGb,KAAK,CAACc,QAAQ,CAAS,UAAU,CAAC;EACxE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGhB,KAAK,CAACc,QAAQ,CAAW,EAAE,CAAC;EAC1D,MAAM,CAACG,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,KAAK,CAACc,QAAQ,CAAS,CAAC,CAAC,CAAW;EAG9E,MAAMK,YAAY,GAAG,IAAIC,GAAG,EAAqB;EACjDD,YAAY,CAACE,GAAG,CAAC,UAAU,eAAEhB,OAAA,CAACF,OAAO;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG,CAAC;EACzCN,YAAY,CAACE,GAAG,CAAC,SAAS,eAAEhB,OAAA,CAACH,MAAM;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG,CAAC;EACvCN,YAAY,CAACE,GAAG,CAAC,UAAU,eAAEhB,OAAA,CAACJ,OAAO;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG,CAAC;EAEzC,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B;IACAC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACf,OAAO,CAAC,CAAC;EACtC,CAAC;EAED,oBACEV,OAAA,CAAAE,SAAA;IAAAwB,QAAA,eACE1B,OAAA,CAACG,wBAAwB,CAACwB,QAAQ;MAChCC,KAAK,EAAE;QACLrB,WAAW;QAAEC,cAAc;QAC3BE,OAAO;QAAEC,UAAU;QACnBC,aAAa;QAAEC;MACjB,CAAE;MAAAa,QAAA,gBACA1B,OAAA;QAAA0B,QAAA,eACE1B,OAAA;UAAI6B,OAAO,EAAER,cAAe;UAAAK,QAAA,EAAC;QAE7B;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAK;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACE,eACXpB,OAAA;QAAK8B,EAAE,EAAC,YAAY;QAAAJ,QAAA,EACjBZ,YAAY,CAACiB,GAAG,CAACxB,WAAW;MAAC;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC1B;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAC4B,iBACnC;AAGP,CAAC;AAAAd,EAAA,CArCKD,iBAAiB;AAAA2B,EAAA,GAAjB3B,iBAAiB;AAuCvB,eAAeA,iBAAiB;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}