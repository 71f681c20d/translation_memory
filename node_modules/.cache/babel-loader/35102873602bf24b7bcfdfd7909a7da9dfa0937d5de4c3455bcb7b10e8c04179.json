{"ast":null,"code":"var _jsxFileName = \"/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/TranslationMemory.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TranslationMemory = () => {\n  _s();\n  const [gameState, setGameState] = React.useState('new_game');\n  const [phrases, setPhrases] = React.useState();\n  const [currentPhrase, setCurrentPhrase] = React.useState();\n  const [reveal, setReveal] = React.useState(false);\n  const handleReveal = event => {\n    setReveal(!reveal);\n  };\n  const handleRestart = () => {\n    console.log(\"Beginnning a new game\");\n  };\n  const translationMemoryContext = /*#__PURE__*/React.createContext(new GameState());\n  const gameStateMap = new Map();\n  gameStateMap.set('new_game', /*#__PURE__*/_jsxDEV(NewGame, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 32\n  }, this));\n  gameStateMap.set('new_game', /*#__PURE__*/_jsxDEV(NewGame, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 32\n  }, this));\n  gameStateMap.set('new_game', /*#__PURE__*/_jsxDEV(NewGame, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 32\n  }, this));\n  gameStateMap.get(key); // return \"value\"\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"game_state\",\n      children: gameStateMap.get(gameState)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false)\n  // <>\n  //   <header>\n  //     <h1>\n  //       The Phrase Translation Memory Game\n  //     </h1>\n  //     <img src=\"../Cartoon.png\" width=\"200\"/>\n  //   </header>\n\n  //   <translationMemoryContext.Provider \n  //     value={{\n  //       phrases, setPhrases, \n  //       currentPhrase, setCurrentPhrase,\n  //     }}>\n\n  //   <div id=\"new_game\">\n  //     <p>\n  //       Upload a CSV with columns English Text, Translated Text, and Included \n  //     </p>\n  //     <DocumentUploader />\n  //   </div>\n\n  //   <div id=\"in_game\">\n  //     <p>\n  //       Write the translation with correct spelling:\n  //     </p>\n  //     <p>\n  //       {currentPhrase?.english_text}\n  //     </p>\n  //     <button id=\"reveal\" onClick={handleReveal}>\n  //       Reveal Translation\n  //     </button>\n  //   </div>\n\n  //   <div id=\"end_game\">\n  //     <p>\n  //       You've gotten all translations correct!\n  //     </p>\n  //     <button id=\"restart\" onClick={handleRestart}>\n  //       Restart\n  //     </button>\n  //   </div>\n\n  //   </translationMemoryContext.Provider>\n  // </>\n  ;\n};\n_s(TranslationMemory, \"R0JGGiOjS+A/A46xzKaMEtNKxzM=\");\n_c = TranslationMemory;\nexport default TranslationMemory;\nvar _c;\n$RefreshReg$(_c, \"TranslationMemory\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","TranslationMemory","_s","gameState","setGameState","useState","phrases","setPhrases","currentPhrase","setCurrentPhrase","reveal","setReveal","handleReveal","event","handleRestart","console","log","translationMemoryContext","createContext","GameState","gameStateMap","Map","set","NewGame","fileName","_jsxFileName","lineNumber","columnNumber","get","key","children","id","_c","$RefreshReg$"],"sources":["/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/TranslationMemory.tsx"],"sourcesContent":["import React from \"react\";\nimport { JsxElement } from \"typescript\";\nimport Phrase from \"../../Models/Phrase\";\nimport DocumentUploader from \"./NewGame/DocumentUploader\";\n\nconst TranslationMemory = () => {\n\n  type GameState = {\n    gameState: string,\n    setGameState: Function,\n    phrases: Phrase[],\n    setPhrases: Function,\n    currentPhrase: Phrase,\n    setCurrentPhrase: Function,\n  }\n\n  const [gameState, setGameState] = React.useState<string>('new_game');\n  const [phrases, setPhrases] = React.useState<Phrase[]>();\n  const [currentPhrase, setCurrentPhrase] = React.useState<Phrase>();\n\n  const [reveal, setReveal] = React.useState<Boolean>(false);\n\n  const handleReveal = (event: any) => {\n    setReveal(!reveal);\n  }\n\n  const handleRestart = () => {\n    console.log(\"Beginnning a new game\");\n  }\n\n  const translationMemoryContext = React.createContext<GameState>(new GameState);\n\n  const gameStateMap = new Map<string, ReactNode>(); \n  gameStateMap.set('new_game', <NewGame/>);\n  gameStateMap.set('new_game', <NewGame/>);\n  gameStateMap.set('new_game', <NewGame/>);\n  gameStateMap.get(key); // return \"value\"\n\n  \n  return (\n    <>\n      <div id=\"game_state\">\n        {gameStateMap.get(gameState)}\n      </div>\n    </>\n    // <>\n    //   <header>\n    //     <h1>\n    //       The Phrase Translation Memory Game\n    //     </h1>\n    //     <img src=\"../Cartoon.png\" width=\"200\"/>\n    //   </header>\n\n    //   <translationMemoryContext.Provider \n    //     value={{\n    //       phrases, setPhrases, \n    //       currentPhrase, setCurrentPhrase,\n    //     }}>\n\n    //   <div id=\"new_game\">\n    //     <p>\n    //       Upload a CSV with columns English Text, Translated Text, and Included \n    //     </p>\n    //     <DocumentUploader />\n    //   </div>\n\n    //   <div id=\"in_game\">\n    //     <p>\n    //       Write the translation with correct spelling:\n    //     </p>\n    //     <p>\n    //       {currentPhrase?.english_text}\n    //     </p>\n    //     <button id=\"reveal\" onClick={handleReveal}>\n    //       Reveal Translation\n    //     </button>\n    //   </div>\n\n    //   <div id=\"end_game\">\n    //     <p>\n    //       You've gotten all translations correct!\n    //     </p>\n    //     <button id=\"restart\" onClick={handleRestart}>\n    //       Restart\n    //     </button>\n    //   </div>\n\n    //   </translationMemoryContext.Provider>\n    // </>\n  )\n}\n\nexport default TranslationMemory;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAK1B,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAW9B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,KAAK,CAACS,QAAQ,CAAS,UAAU,CAAC;EACpE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,KAAK,CAACS,QAAQ,EAAY;EACxD,MAAM,CAACG,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,KAAK,CAACS,QAAQ,EAAU;EAElE,MAAM,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGf,KAAK,CAACS,QAAQ,CAAU,KAAK,CAAC;EAE1D,MAAMO,YAAY,GAAIC,KAAU,IAAK;IACnCF,SAAS,CAAC,CAACD,MAAM,CAAC;EACpB,CAAC;EAED,MAAMI,aAAa,GAAGA,CAAA,KAAM;IAC1BC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EACtC,CAAC;EAED,MAAMC,wBAAwB,gBAAGrB,KAAK,CAACsB,aAAa,CAAY,IAAIC,SAAS,GAAC;EAE9E,MAAMC,YAAY,GAAG,IAAIC,GAAG,EAAqB;EACjDD,YAAY,CAACE,GAAG,CAAC,UAAU,eAAExB,OAAA,CAACyB,OAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAE,CAAC;EACxCP,YAAY,CAACE,GAAG,CAAC,UAAU,eAAExB,OAAA,CAACyB,OAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAE,CAAC;EACxCP,YAAY,CAACE,GAAG,CAAC,UAAU,eAAExB,OAAA,CAACyB,OAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAE,CAAC;EACxCP,YAAY,CAACQ,GAAG,CAACC,GAAG,CAAC,CAAC,CAAC;;EAGvB,oBACE/B,OAAA,CAAAE,SAAA;IAAA8B,QAAA,eACEhC,OAAA;MAAKiC,EAAE,EAAC,YAAY;MAAAD,QAAA,EACjBV,YAAY,CAACQ,GAAG,CAACzB,SAAS;IAAC;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACxB;EAER;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EAAA;AAEJ,CAAC;AAAAzB,EAAA,CArFKD,iBAAiB;AAAA+B,EAAA,GAAjB/B,iBAAiB;AAuFvB,eAAeA,iBAAiB;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}