{"ast":null,"code":"var _jsxFileName = \"/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/TranslationMemory.tsx\",\n  _s = $RefreshSig$();\nimport react from \"react\";\nimport EndGame from \"./EndGame/EndGame\";\nimport InGame from \"./InGame/InGame\";\nimport NewGame from \"./NewGame/NewGame\";\n\n/**\n * This component is the root component for the Translation Memory Game\n * There are 3 possible pages/states: new_game, in_game, and end_game\n * Each of these states has a corresponding component\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const translationMemoryContext = /*#__PURE__*/react.createContext('');\nconst TranslationMemory = () => {\n  _s();\n  const [gameState, setGameState] = react.useState('new_game');\n  const [phrases, setPhrases] = react.useState();\n  const [currentPhrase, setCurrentPhrase] = react.useState();\n  const [reveal, setReveal] = react.useState(false);\n  const handleReveal = event => {\n    setReveal(!reveal);\n  };\n  const handleRestart = () => {\n    console.log(\"Beginnning a new game\");\n  };\n  const gameStateMap = new Map();\n  gameStateMap.set('new_game', /*#__PURE__*/_jsxDEV(NewGame, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 32\n  }, this));\n  gameStateMap.set('in_game', /*#__PURE__*/_jsxDEV(InGame, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 31\n  }, this));\n  gameStateMap.set('end_game', /*#__PURE__*/_jsxDEV(EndGame, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 32\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"The Phrase Translation Memory Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(translationMemoryContext.Provider, {\n      value: {\n        phrases,\n        setPhrases,\n        currentPhrase,\n        setCurrentPhrase\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"game_state\",\n        children: gameStateMap.get(gameState)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(TranslationMemory, \"R0JGGiOjS+A/A46xzKaMEtNKxzM=\");\n_c = TranslationMemory;\nexport default TranslationMemory;\nvar _c;\n$RefreshReg$(_c, \"TranslationMemory\");","map":{"version":3,"names":["react","EndGame","InGame","NewGame","jsxDEV","_jsxDEV","Fragment","_Fragment","translationMemoryContext","createContext","TranslationMemory","_s","gameState","setGameState","useState","phrases","setPhrases","currentPhrase","setCurrentPhrase","reveal","setReveal","handleReveal","event","handleRestart","console","log","gameStateMap","Map","set","fileName","_jsxFileName","lineNumber","columnNumber","children","Provider","value","id","get","_c","$RefreshReg$"],"sources":["/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/TranslationMemory.tsx"],"sourcesContent":["import react, { ReactNode } from \"react\";\nimport { JsxElement } from \"typescript\";\nimport Phrase from \"../../Models/Phrase\";\nimport EndGame from \"./EndGame/EndGame\";\nimport InGame from \"./InGame/InGame\";\nimport DocumentUploader from \"./NewGame/DocumentUploader\";\nimport NewGame from \"./NewGame/NewGame\";\n\n/**\n * This component is the root component for the Translation Memory Game\n * There are 3 possible pages/states: new_game, in_game, and end_game\n * Each of these states has a corresponding component\n */\n\ntype GameState = {\n  gameState: string,\n  setGameState: Function,\n  phrases: Phrase[],\n  setPhrases: Function,\n  currentPhrase: Phrase,\n  setCurrentPhrase: Function,\n}\nexport const translationMemoryContext = react.createContext('');\n\nconst TranslationMemory = () => {\n\n\n  const [gameState, setGameState] = react.useState<string>('new_game');\n  const [phrases, setPhrases] = react.useState<Phrase[]>();\n  const [currentPhrase, setCurrentPhrase] = react.useState<Phrase>();\n\n  const [reveal, setReveal] = react.useState<Boolean>(false);\n\n  const handleReveal = (event: any) => {\n    setReveal(!reveal);\n  }\n\n  const handleRestart = () => {\n    console.log(\"Beginnning a new game\");\n  }\n\n\n\n  const gameStateMap = new Map<string, ReactNode>();\n  gameStateMap.set('new_game', <NewGame />);\n  gameStateMap.set('in_game', <InGame />);\n  gameStateMap.set('end_game', <EndGame />);\n\n  return (\n    <>\n      <header>\n        <h1>\n          The Phrase Translation Memory Game\n        </h1>\n      </header>\n\n      <translationMemoryContext.Provider\n        value={{\n          phrases, setPhrases,\n          currentPhrase, setCurrentPhrase,\n        }}>\n        <div id=\"game_state\">\n          {gameStateMap.get(gameState)}\n        </div>\n\n\n\n      </translationMemoryContext.Provider>\n    </>\n\n  )\n}\n\nexport default TranslationMemory;"],"mappings":";;AAAA,OAAOA,KAAK,MAAqB,OAAO;AAGxC,OAAOC,OAAO,MAAM,mBAAmB;AACvC,OAAOC,MAAM,MAAM,iBAAiB;AAEpC,OAAOC,OAAO,MAAM,mBAAmB;;AAEvC;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAcA,OAAO,MAAMC,wBAAwB,gBAAGR,KAAK,CAACS,aAAa,CAAC,EAAE,CAAC;AAE/D,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAG9B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGb,KAAK,CAACc,QAAQ,CAAS,UAAU,CAAC;EACpE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGhB,KAAK,CAACc,QAAQ,EAAY;EACxD,MAAM,CAACG,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,KAAK,CAACc,QAAQ,EAAU;EAElE,MAAM,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGpB,KAAK,CAACc,QAAQ,CAAU,KAAK,CAAC;EAE1D,MAAMO,YAAY,GAAIC,KAAU,IAAK;IACnCF,SAAS,CAAC,CAACD,MAAM,CAAC;EACpB,CAAC;EAED,MAAMI,aAAa,GAAGA,CAAA,KAAM;IAC1BC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EACtC,CAAC;EAID,MAAMC,YAAY,GAAG,IAAIC,GAAG,EAAqB;EACjDD,YAAY,CAACE,GAAG,CAAC,UAAU,eAAEvB,OAAA,CAACF,OAAO;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG,CAAC;EACzCN,YAAY,CAACE,GAAG,CAAC,SAAS,eAAEvB,OAAA,CAACH,MAAM;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG,CAAC;EACvCN,YAAY,CAACE,GAAG,CAAC,UAAU,eAAEvB,OAAA,CAACJ,OAAO;IAAA4B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG,CAAC;EAEzC,oBACE3B,OAAA,CAAAE,SAAA;IAAA0B,QAAA,gBACE5B,OAAA;MAAA4B,QAAA,eACE5B,OAAA;QAAA4B,QAAA,EAAI;MAEJ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE,eAET3B,OAAA,CAACG,wBAAwB,CAAC0B,QAAQ;MAChCC,KAAK,EAAE;QACLpB,OAAO;QAAEC,UAAU;QACnBC,aAAa;QAAEC;MACjB,CAAE;MAAAe,QAAA,eACF5B,OAAA;QAAK+B,EAAE,EAAC,YAAY;QAAAH,QAAA,EACjBP,YAAY,CAACW,GAAG,CAACzB,SAAS;MAAC;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACxB;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAI4B;EAAA,gBACnC;AAGP,CAAC;AAAArB,EAAA,CA/CKD,iBAAiB;AAAA4B,EAAA,GAAjB5B,iBAAiB;AAiDvB,eAAeA,iBAAiB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}