{"ast":null,"code":"var _jsxFileName = \"/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/TranslationMemory.tsx\",\n  _s = $RefreshSig$();\nimport react from \"react\";\nimport EndGame from \"./EndGame/EndGame\";\nimport InGame from \"./InGame/InGame\";\nimport NewGame from \"./NewGame/NewGame\";\n\n/**\n * This component is the root component for the Translation Memory Game\n * There are 3 possible pages/states: new_game, in_game, and end_game\n * Each of these states has a corresponding component\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const translationMemoryContext = /*#__PURE__*/react.createContext({});\nconst TranslationMemory = () => {\n  _s();\n  const [currentPage, setCurrentPage] = react.useState('new_game');\n  const [phrases, setPhrases] = react.useState([]);\n  const [startTime, setStartTime] = react.useState();\n  const [incorrectCount, setIncorrectCount] = react.useState(0);\n  const gameStateMap = new Map();\n  gameStateMap.set('new_game', /*#__PURE__*/_jsxDEV(NewGame, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 32\n  }, this));\n  gameStateMap.set('in_game', /*#__PURE__*/_jsxDEV(InGame, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 31\n  }, this));\n  gameStateMap.set('end_game', /*#__PURE__*/_jsxDEV(EndGame, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 32\n  }, this));\n  const printGameState = () => {\n    // For the purposes of debugging\n    console.log(JSON.stringify(translationMemoryContext));\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        onClick: printGameState,\n        children: \"The Phrase Translation Memory Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(translationMemoryContext.Provider, {\n      value: {\n        currentPage,\n        setCurrentPage,\n        phrases,\n        setPhrases,\n        startTime,\n        setStartTime,\n        incorrectCount,\n        setIncorrectCount\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"game_state\",\n        children: gameStateMap.get(currentPage)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(TranslationMemory, \"2SF7wrjgZcLX7CCgPPE5wfg72CY=\");\n_c = TranslationMemory;\nexport default TranslationMemory;\nvar _c;\n$RefreshReg$(_c, \"TranslationMemory\");","map":{"version":3,"names":["react","EndGame","InGame","NewGame","jsxDEV","_jsxDEV","Fragment","_Fragment","translationMemoryContext","createContext","TranslationMemory","_s","currentPage","setCurrentPage","useState","phrases","setPhrases","startTime","setStartTime","incorrectCount","setIncorrectCount","gameStateMap","Map","set","fileName","_jsxFileName","lineNumber","columnNumber","printGameState","console","log","JSON","stringify","children","onClick","Provider","value","id","get","_c","$RefreshReg$"],"sources":["/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/TranslationMemory.tsx"],"sourcesContent":["import react, { ReactNode } from \"react\";\nimport Phrase from \"../../Models/Phrase\";\nimport EndGame from \"./EndGame/EndGame\";\nimport InGame from \"./InGame/InGame\";\nimport NewGame from \"./NewGame/NewGame\";\n\n/**\n * This component is the root component for the Translation Memory Game\n * There are 3 possible pages/states: new_game, in_game, and end_game\n * Each of these states has a corresponding component\n */\n\nexport type GameState = {\n  startTime?: Date,\n  setStartTime?: Function,\n  currentPage?: string,\n  setCurrentPage?: Function,\n  phrases?: Phrase[],\n  setPhrases?: Function,\n  incorrectCount?: number,\n  setIncorrectCount?: Function\n}\n\nexport const translationMemoryContext = react.createContext<GameState>({});\n\nconst TranslationMemory = () => {\n\n  const [currentPage, setCurrentPage] = react.useState<string>('new_game');\n  const [phrases, setPhrases] = react.useState<Phrase[]>([]);\n  const [startTime, setStartTime] = react.useState<Date>();\n  const [incorrectCount, setIncorrectCount] = react.useState<number>(0);\n  \n\n\n  const gameStateMap = new Map<string, ReactNode>();\n  gameStateMap.set('new_game', <NewGame />);\n  gameStateMap.set('in_game', <InGame />);\n  gameStateMap.set('end_game', <EndGame />);\n\n  const printGameState = () => {\n    // For the purposes of debugging\n    console.log(JSON.stringify(translationMemoryContext));\n  }\n\n  return (\n    <>\n      <header>\n        <h1 onClick={printGameState}>\n          The Phrase Translation Memory Game\n        </h1>\n      </header>\n      <translationMemoryContext.Provider\n        value={{\n          currentPage, setCurrentPage,\n          phrases, setPhrases,\n          startTime, setStartTime,\n          incorrectCount, setIncorrectCount\n        }}>\n        <div id=\"game_state\">\n          {gameStateMap.get(currentPage)}\n        </div>\n      </translationMemoryContext.Provider>\n    </>\n\n  )\n}\n\nexport default TranslationMemory;"],"mappings":";;AAAA,OAAOA,KAAK,MAAqB,OAAO;AAExC,OAAOC,OAAO,MAAM,mBAAmB;AACvC,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,OAAO,MAAM,mBAAmB;;AAEvC;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAiBA,OAAO,MAAMC,wBAAwB,gBAAGR,KAAK,CAACS,aAAa,CAAY,CAAC,CAAC,CAAC;AAE1E,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE9B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGb,KAAK,CAACc,QAAQ,CAAS,UAAU,CAAC;EACxE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGhB,KAAK,CAACc,QAAQ,CAAW,EAAE,CAAC;EAC1D,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGlB,KAAK,CAACc,QAAQ,EAAQ;EACxD,MAAM,CAACK,cAAc,EAAEC,iBAAiB,CAAC,GAAGpB,KAAK,CAACc,QAAQ,CAAS,CAAC,CAAC;EAIrE,MAAMO,YAAY,GAAG,IAAIC,GAAG,EAAqB;EACjDD,YAAY,CAACE,GAAG,CAAC,UAAU,eAAElB,OAAA,CAACF,OAAO;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG,CAAC;EACzCN,YAAY,CAACE,GAAG,CAAC,SAAS,eAAElB,OAAA,CAACH,MAAM;IAAAsB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG,CAAC;EACvCN,YAAY,CAACE,GAAG,CAAC,UAAU,eAAElB,OAAA,CAACJ,OAAO;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG,CAAC;EAEzC,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B;IACAC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACxB,wBAAwB,CAAC,CAAC;EACvD,CAAC;EAED,oBACEH,OAAA,CAAAE,SAAA;IAAA0B,QAAA,gBACE5B,OAAA;MAAA4B,QAAA,eACE5B,OAAA;QAAI6B,OAAO,EAAEN,cAAe;QAAAK,QAAA,EAAC;MAE7B;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACE,eACTtB,OAAA,CAACG,wBAAwB,CAAC2B,QAAQ;MAChCC,KAAK,EAAE;QACLxB,WAAW;QAAEC,cAAc;QAC3BE,OAAO;QAAEC,UAAU;QACnBC,SAAS;QAAEC,YAAY;QACvBC,cAAc;QAAEC;MAClB,CAAE;MAAAa,QAAA,eACF5B,OAAA;QAAKgC,EAAE,EAAC,YAAY;QAAAJ,QAAA,EACjBZ,YAAY,CAACiB,GAAG,CAAC1B,WAAW;MAAC;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAC1B;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAC4B;EAAA,gBACnC;AAGP,CAAC;AAAAhB,EAAA,CAxCKD,iBAAiB;AAAA6B,EAAA,GAAjB7B,iBAAiB;AA0CvB,eAAeA,iBAAiB;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}