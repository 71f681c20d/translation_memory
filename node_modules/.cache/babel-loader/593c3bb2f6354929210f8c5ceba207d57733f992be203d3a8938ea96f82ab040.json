{"ast":null,"code":"var _jsxFileName = \"/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/InGame/InGame.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect } from \"react\";\nimport { translationMemoryContext } from \"../TranslationMemory\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst InGame = () => {\n  _s();\n  var _remainingPhrases$cur, _remainingPhrases$cur2;\n  const translationMemoryStore = useContext(translationMemoryContext);\n  const setCurrentPage = translationMemoryStore === null || translationMemoryStore === void 0 ? void 0 : translationMemoryStore.setCurrentPage;\n  const phrases = translationMemoryStore === null || translationMemoryStore === void 0 ? void 0 : translationMemoryStore.phrases;\n  const setStartTime = translationMemoryStore === null || translationMemoryStore === void 0 ? void 0 : translationMemoryStore.setStartTime;\n  const incorrectCount = translationMemoryStore === null || translationMemoryStore === void 0 ? void 0 : translationMemoryStore.incorrectCount;\n  const setIncorrectCount = translationMemoryStore === null || translationMemoryStore === void 0 ? void 0 : translationMemoryStore.setIncorrectCount;\n  const [reveal, setReveal] = React.useState(false);\n  const [remainingPhrases, setRemainingPhrases] = React.useState(phrases);\n  const [currentIndex, setCurrentIndex] = React.useState(0);\n  useEffect(() => {\n    setStartTime ? setStartTime(new Date()) : console.error('Unable to set start time');\n  }, []);\n  const handleReveal = event => {\n    console.log('Revealing translation');\n    setReveal(!reveal);\n  };\n  const handleIncorrect = event => {\n    console.log('Incorrect translation');\n    setIncorrectCount(incorrectCount + 1);\n    // Load the next phrase\n    nextPhrase();\n  };\n  const handleCorrect = event => {\n    console.log('Correct translation');\n    // If the user gets it correct, then delete that phrase from RemainingPhrases\n    let tempPhrases = remainingPhrases;\n    tempPhrases.splice(currentIndex, 1);\n    setRemainingPhrases(tempPhrases);\n    // Load the next phrase\n    nextPhrase();\n  };\n  const nextPhrase = () => {\n    // check if there are any more phrases\n    if ((remainingPhrases === null || remainingPhrases === void 0 ? void 0 : remainingPhrases.length) == 0) {\n      setCurrentPage ? setCurrentPage('end_game') : console.error('There are no more phrases left');\n    }\n    // Randomly select a new index for the phrase array\n    const index = Math.floor(Math.random() * remainingPhrases.length);\n    console.log('index: ' + index);\n    setCurrentIndex(index);\n    setReveal(false);\n  };\n  useEffect(() => {\n    nextPhrase();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"in_game\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"instructions\",\n        style: {\n          fontSize: 20,\n          color: \"blue\",\n          textDecorationLine: \"underline\",\n          fontStyle: \"italic\"\n        },\n        children: \"Write the translation with correct spelling:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"english_text\",\n        style: {\n          fontSize: 40,\n          color: \"black\",\n          fontWeight: \"bold\"\n        },\n        children: (_remainingPhrases$cur = remainingPhrases[currentIndex]) === null || _remainingPhrases$cur === void 0 ? void 0 : _remainingPhrases$cur.english_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"reveal\",\n        onClick: handleReveal,\n        style: {\n          background: \"blue\",\n          fontWeight: \"bold\"\n        },\n        children: \"Reveal Translation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), reveal && /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"revealable_component\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"translated_text\",\n          style: {\n            fontSize: 45,\n            color: \"black\",\n            fontWeight: \"bold\"\n          },\n          children: (_remainingPhrases$cur2 = remainingPhrases[currentIndex]) === null || _remainingPhrases$cur2 === void 0 ? void 0 : _remainingPhrases$cur2.translation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"incorrect_button\",\n          onClick: handleIncorrect,\n          style: {\n            background: \"red\"\n          },\n          children: \"Incorrect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"correct_button\",\n          onClick: handleCorrect,\n          style: {\n            background: \"green\"\n          },\n          children: \"Correct\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(InGame, \"gKGQOY/ciL+9IoHeSxfdrhsOSnM=\");\n_c = InGame;\nexport default InGame;\nvar _c;\n$RefreshReg$(_c, \"InGame\");","map":{"version":3,"names":["React","useContext","useEffect","translationMemoryContext","jsxDEV","_jsxDEV","Fragment","_Fragment","InGame","_s","_remainingPhrases$cur","_remainingPhrases$cur2","translationMemoryStore","setCurrentPage","phrases","setStartTime","incorrectCount","setIncorrectCount","reveal","setReveal","useState","remainingPhrases","setRemainingPhrases","currentIndex","setCurrentIndex","Date","console","error","handleReveal","event","log","handleIncorrect","nextPhrase","handleCorrect","tempPhrases","splice","length","index","Math","floor","random","children","id","style","fontSize","color","textDecorationLine","fontStyle","fileName","_jsxFileName","lineNumber","columnNumber","fontWeight","english_text","onClick","background","translation","_c","$RefreshReg$"],"sources":["/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/InGame/InGame.tsx"],"sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport Phrase from \"../../../Models/Phrase\";\nimport { translationMemoryContext } from \"../TranslationMemory\";\n\nconst InGame = () => {\n\n  const translationMemoryStore = useContext(translationMemoryContext);\n  const setCurrentPage = translationMemoryStore?.setCurrentPage;\n  const phrases = translationMemoryStore?.phrases;\n  const setStartTime = translationMemoryStore?.setStartTime;\n  const incorrectCount = translationMemoryStore?.incorrectCount as number;\n  const setIncorrectCount = translationMemoryStore?.setIncorrectCount as Function;\n\n  const [reveal, setReveal] = React.useState<Boolean>(false);\n  const [remainingPhrases, setRemainingPhrases] = React.useState<Phrase[]>(phrases as Phrase[]);\n  const [currentIndex, setCurrentIndex] = React.useState<number>(0);\n\n  useEffect(() => {\n    setStartTime ? setStartTime(new Date()) : console.error('Unable to set start time');\n  }, []);\n\n  const handleReveal = (event: any) => {\n    console.log('Revealing translation');\n    setReveal(!reveal);\n  }\n\n  const handleIncorrect = (event: any) => {\n\n    console.log('Incorrect translation');\n    setIncorrectCount(incorrectCount + 1);\n    // Load the next phrase\n    nextPhrase();\n  }\n\n  const handleCorrect = (event: any) => {\n    console.log('Correct translation');\n    // If the user gets it correct, then delete that phrase from RemainingPhrases\n    let tempPhrases: Phrase[] = remainingPhrases;\n    tempPhrases.splice(currentIndex, 1);\n    setRemainingPhrases(tempPhrases);\n    // Load the next phrase\n    nextPhrase();\n  }\n\n  const nextPhrase = () => {\n    // check if there are any more phrases\n    if (remainingPhrases?.length == 0) {\n      setCurrentPage ? setCurrentPage('end_game') : console.error('There are no more phrases left');\n    }\n    // Randomly select a new index for the phrase array\n    const index = Math.floor(Math.random() * remainingPhrases.length);\n    console.log('index: ' + index)\n    setCurrentIndex(index);\n    setReveal(false);\n  }\n\n  useEffect(() => {\n    nextPhrase();\n  }, []);\n\n\n\n  return (\n    <>\n      <div id=\"in_game\">\n        <p id=\"instructions\" style={{ fontSize: 20, color: \"blue\", textDecorationLine: \"underline\", fontStyle: \"italic\"}}>\n          Write the translation with correct spelling:\n        </p>\n        <p id=\"english_text\" style={{ fontSize: 40, color: \"black\", fontWeight: \"bold\"}}>\n          {remainingPhrases[currentIndex]?.english_text}\n        </p>\n        <button id=\"reveal\" onClick={handleReveal} style={{ background: \"blue\", fontWeight: \"bold\"}}>\n          Reveal Translation\n        </button>\n        {reveal &&\n          <div id=\"revealable_component\">\n            <p id=\"translated_text\" style={{ fontSize: 45, color: \"black\", fontWeight: \"bold\"}}>\n              {remainingPhrases[currentIndex]?.translation}\n            </p>\n            <button id=\"incorrect_button\" onClick={handleIncorrect} style={{ background: \"red\"}}>\n              Incorrect\n            </button>\n            <button id=\"correct_button\" onClick={handleCorrect} style={{ background: \"green\"}}>\n              Correct\n            </button>\n          </div>\n        }\n      </div>\n    </>\n  )\n}\n\nexport default InGame"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}