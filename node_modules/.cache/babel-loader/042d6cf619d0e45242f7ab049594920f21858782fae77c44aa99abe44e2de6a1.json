{"ast":null,"code":"var _jsxFileName = \"/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/InGame/InGame.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect } from \"react\";\nimport { translationMemoryContext } from \"../TranslationMemory\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst InGame = () => {\n  _s();\n  var _currentPhrase, _currentPhrase2;\n  const translationMemoryStore = useContext(translationMemoryContext);\n  const setCurrentPage = translationMemoryStore === null || translationMemoryStore === void 0 ? void 0 : translationMemoryStore.setCurrentPage;\n  const phrases = translationMemoryStore === null || translationMemoryStore === void 0 ? void 0 : translationMemoryStore.phrases;\n  const [reveal, setReveal] = React.useState(false);\n  const [remainingPhrases, setRemainingPhrases] = React.useState(phrases);\n  const [currentIndex, setCurrentIndex] = React.useState(0);\n  const handleReveal = event => {\n    console.log('Revealing translation');\n    setReveal(!reveal);\n  };\n  const handleIncorrect = event => {\n    console.log('Incorrect translation');\n    // Load the next phrase\n    nextPhrase();\n  };\n  const handleCorrect = event => {\n    console.log('Correct translation');\n    // If the user gets it correct, then add that phrase to CorrectPhrases\n\n    // Load the next phrase\n    nextPhrase();\n  };\n  const nextPhrase = () => {\n    // check if there are any more phrases\n    if ((phrases === null || phrases === void 0 ? void 0 : phrases.length) == 0) {\n      setCurrentPage ? setCurrentPage('end_game') : console.error('There are no more phrases left');\n    }\n    // Randomly select a new index for the phrase array\n    setCurrentIndex(Math.random() * remainingPhrases.length);\n    setReveal(false);\n  };\n  useEffect(() => {\n    nextPhrase();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"in_game\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"instructions\",\n        children: \"Write the translation with correct spelling:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"english_text\",\n        children: (_currentPhrase = currentPhrase) === null || _currentPhrase === void 0 ? void 0 : _currentPhrase.english_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"reveal\",\n        onClick: handleReveal,\n        children: \"Reveal Translation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), reveal && /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"revealable_component\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"translated_text\",\n          children: (_currentPhrase2 = currentPhrase) === null || _currentPhrase2 === void 0 ? void 0 : _currentPhrase2.translation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"incorrect_button\",\n          onClick: handleIncorrect,\n          children: \"Incorrect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"correct_button\",\n          onClick: handleCorrect,\n          children: \"Correct\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(InGame, \"H10nr/2MRI+TOHwf/IJSD8ZVwb4=\");\n_c = InGame;\nexport default InGame;\nvar _c;\n$RefreshReg$(_c, \"InGame\");","map":{"version":3,"names":["React","useContext","useEffect","translationMemoryContext","jsxDEV","_jsxDEV","Fragment","_Fragment","InGame","_s","_currentPhrase","_currentPhrase2","translationMemoryStore","setCurrentPage","phrases","reveal","setReveal","useState","remainingPhrases","setRemainingPhrases","currentIndex","setCurrentIndex","handleReveal","event","console","log","handleIncorrect","nextPhrase","handleCorrect","length","error","Math","random","children","id","fileName","_jsxFileName","lineNumber","columnNumber","currentPhrase","english_text","onClick","translation","_c","$RefreshReg$"],"sources":["/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/InGame/InGame.tsx"],"sourcesContent":["import React, { useContext, useEffect } from \"react\";\nimport Phrase from \"../../../Models/Phrase\";\nimport { translationMemoryContext } from \"../TranslationMemory\";\n\nconst InGame = () => {\n\n  const translationMemoryStore = useContext(translationMemoryContext);\n  const setCurrentPage = translationMemoryStore?.setCurrentPage;\n  const phrases = translationMemoryStore?.phrases;\n\n  const [reveal, setReveal] = React.useState<Boolean>(false);\n  const [remainingPhrases, setRemainingPhrases] = React.useState<Phrase[]>(phrases as Phrase[]);\n  const [currentIndex, setCurrentIndex] = React.useState<number>(0);\n\n  const handleReveal = (event: any) => {\n    console.log('Revealing translation');\n    setReveal(!reveal);\n  }\n\n  const handleIncorrect = (event: any) => {\n    console.log('Incorrect translation');\n    // Load the next phrase\n    nextPhrase();\n  }\n\n  const handleCorrect = (event: any) => {\n    console.log('Correct translation');\n    // If the user gets it correct, then add that phrase to CorrectPhrases\n\n    // Load the next phrase\n    nextPhrase();\n  }\n\n  const nextPhrase = () => {\n    // check if there are any more phrases\n    if(phrases?.length == 0){\n      setCurrentPage? setCurrentPage('end_game'): console.error('There are no more phrases left');\n    }\n    // Randomly select a new index for the phrase array\n    setCurrentIndex(Math.random()* remainingPhrases.length);\n    setReveal(false);\n  }\n\n  useEffect(() => {\n    nextPhrase();\n  }, []);\n\n\n  \n  return(\n    <>\n        <div id=\"in_game\">\n        <p id=\"instructions\">\n          Write the translation with correct spelling:\n        </p>\n        <p id=\"english_text\">\n          {currentPhrase?.english_text}\n        </p>\n        <button id=\"reveal\" onClick={handleReveal}>\n          Reveal Translation\n        </button>\n        {reveal &&\n          <div id=\"revealable_component\">\n          <p id=\"translated_text\">\n            {currentPhrase?.translation}\n          </p>\n          <button id=\"incorrect_button\" onClick={handleIncorrect}>\n            Incorrect\n          </button>\n          <button id=\"correct_button\" onClick={handleCorrect}>\n            Correct\n          </button>\n        </div>\n        }\n      </div>\n    </>\n  )\n}\n\nexport default InGame"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAEpD,SAASC,wBAAwB,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEhE,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,cAAA,EAAAC,eAAA;EAEnB,MAAMC,sBAAsB,GAAGX,UAAU,CAACE,wBAAwB,CAAC;EACnE,MAAMU,cAAc,GAAGD,sBAAsB,aAAtBA,sBAAsB,uBAAtBA,sBAAsB,CAAEC,cAAc;EAC7D,MAAMC,OAAO,GAAGF,sBAAsB,aAAtBA,sBAAsB,uBAAtBA,sBAAsB,CAAEE,OAAO;EAE/C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGhB,KAAK,CAACiB,QAAQ,CAAU,KAAK,CAAC;EAC1D,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGnB,KAAK,CAACiB,QAAQ,CAAWH,OAAO,CAAa;EAC7F,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGrB,KAAK,CAACiB,QAAQ,CAAS,CAAC,CAAC;EAEjE,MAAMK,YAAY,GAAIC,KAAU,IAAK;IACnCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpCT,SAAS,CAAC,CAACD,MAAM,CAAC;EACpB,CAAC;EAED,MAAMW,eAAe,GAAIH,KAAU,IAAK;IACtCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpC;IACAE,UAAU,EAAE;EACd,CAAC;EAED,MAAMC,aAAa,GAAIL,KAAU,IAAK;IACpCC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC;;IAEA;IACAE,UAAU,EAAE;EACd,CAAC;EAED,MAAMA,UAAU,GAAGA,CAAA,KAAM;IACvB;IACA,IAAG,CAAAb,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEe,MAAM,KAAI,CAAC,EAAC;MACtBhB,cAAc,GAAEA,cAAc,CAAC,UAAU,CAAC,GAAEW,OAAO,CAACM,KAAK,CAAC,gCAAgC,CAAC;IAC7F;IACA;IACAT,eAAe,CAACU,IAAI,CAACC,MAAM,EAAE,GAAEd,gBAAgB,CAACW,MAAM,CAAC;IACvDb,SAAS,CAAC,KAAK,CAAC;EAClB,CAAC;EAEDd,SAAS,CAAC,MAAM;IACdyB,UAAU,EAAE;EACd,CAAC,EAAE,EAAE,CAAC;EAIN,oBACEtB,OAAA,CAAAE,SAAA;IAAA0B,QAAA,eACI5B,OAAA;MAAK6B,EAAE,EAAC,SAAS;MAAAD,QAAA,gBACjB5B,OAAA;QAAG6B,EAAE,EAAC,cAAc;QAAAD,QAAA,EAAC;MAErB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI,eACJjC,OAAA;QAAG6B,EAAE,EAAC,cAAc;QAAAD,QAAA,GAAAvB,cAAA,GACjB6B,aAAa,cAAA7B,cAAA,uBAAbA,cAAA,CAAe8B;MAAY;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC1B,eACJjC,OAAA;QAAQ6B,EAAE,EAAC,QAAQ;QAACO,OAAO,EAAEnB,YAAa;QAAAW,QAAA,EAAC;MAE3C;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,EACRvB,MAAM,iBACLV,OAAA;QAAK6B,EAAE,EAAC,sBAAsB;QAAAD,QAAA,gBAC9B5B,OAAA;UAAG6B,EAAE,EAAC,iBAAiB;UAAAD,QAAA,GAAAtB,eAAA,GACpB4B,aAAa,cAAA5B,eAAA,uBAAbA,eAAA,CAAe+B;QAAW;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACzB,eACJjC,OAAA;UAAQ6B,EAAE,EAAC,kBAAkB;UAACO,OAAO,EAAEf,eAAgB;UAAAO,QAAA,EAAC;QAExD;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS,eACTjC,OAAA;UAAQ6B,EAAE,EAAC,gBAAgB;UAACO,OAAO,EAAEb,aAAc;UAAAK,QAAA,EAAC;QAEpD;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACL;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAEF,iBACL;AAEP,CAAC;AAAA7B,EAAA,CAzEKD,MAAM;AAAAmC,EAAA,GAANnC,MAAM;AA2EZ,eAAeA,MAAM;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}