{"ast":null,"code":"import _slicedToArray from\"/Users/alexander/Desktop/translation_memory/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import react from\"react\";import EndGame from\"./EndGame/EndGame\";import InGame from\"./InGame/InGame\";import NewGame from\"./NewGame/NewGame\";/**\n * This component is the root component for the Translation Memory Game\n * There are 3 possible pages/states: new_game, in_game, and end_game\n * Each of these states has a corresponding component\n */import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var translationMemoryContext=/*#__PURE__*/react.createContext({});var TranslationMemory=function TranslationMemory(){var _react$useState=react.useState('new_game'),_react$useState2=_slicedToArray(_react$useState,2),currentPage=_react$useState2[0],setCurrentPage=_react$useState2[1];var _react$useState3=react.useState([]),_react$useState4=_slicedToArray(_react$useState3,2),phrases=_react$useState4[0],setPhrases=_react$useState4[1];var _react$useState5=react.useState({}),_react$useState6=_slicedToArray(_react$useState5,2),startTime=_react$useState6[0],setStartTime=_react$useState6[1];var _react$useState7=react.useState(0),_react$useState8=_slicedToArray(_react$useState7,2),incorrectCount=_react$useState8[0],setIncorrectCount=_react$useState8[1];var gameStateMap=new Map();gameStateMap.set('new_game',/*#__PURE__*/_jsx(NewGame,{}));gameStateMap.set('in_game',/*#__PURE__*/_jsx(InGame,{}));gameStateMap.set('end_game',/*#__PURE__*/_jsx(EndGame,{}));var printGameState=function printGameState(){// For the purposes of debugging\nconsole.log(JSON.stringify(phrases));};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"header\",{children:/*#__PURE__*/_jsx(\"h1\",{onClick:printGameState,children:\"The Phrase Translation Memory Game\"})}),/*#__PURE__*/_jsx(translationMemoryContext.Provider,{value:{currentPage:currentPage,setCurrentPage:setCurrentPage,phrases:phrases,setPhrases:setPhrases,startTime:startTime,setStartTime:setStartTime,incorrectCount:incorrectCount,setIncorrectCount:setIncorrectCount},children:/*#__PURE__*/_jsx(\"div\",{id:\"game_state\",children:gameStateMap.get(currentPage)})})]});};export default TranslationMemory;","map":{"version":3,"names":["react","EndGame","InGame","NewGame","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","translationMemoryContext","createContext","TranslationMemory","_react$useState","useState","_react$useState2","_slicedToArray","currentPage","setCurrentPage","_react$useState3","_react$useState4","phrases","setPhrases","_react$useState5","_react$useState6","startTime","setStartTime","_react$useState7","_react$useState8","incorrectCount","setIncorrectCount","gameStateMap","Map","set","printGameState","console","log","JSON","stringify","children","onClick","Provider","value","id","get"],"sources":["/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/TranslationMemory.tsx"],"sourcesContent":["import react, { ReactNode } from \"react\";\nimport Phrase from \"../../Models/Phrase\";\nimport EndGame from \"./EndGame/EndGame\";\nimport InGame from \"./InGame/InGame\";\nimport NewGame from \"./NewGame/NewGame\";\n\n/**\n * This component is the root component for the Translation Memory Game\n * There are 3 possible pages/states: new_game, in_game, and end_game\n * Each of these states has a corresponding component\n */\n\nexport type GameState = {\n  startTime?: Date,\n  setStartTime?: Function,\n  currentPage?: string,\n  setCurrentPage?: Function,\n  phrases?: Phrase[],\n  setPhrases?: Function,\n  incorrectCount?: number,\n  setIncorrectCount?: Function\n}\n\nexport const translationMemoryContext = react.createContext<GameState>({});\n\nconst TranslationMemory = () => {\n\n  const [currentPage, setCurrentPage] = react.useState<string>('new_game');\n  const [phrases, setPhrases] = react.useState<Phrase[]>([]);\n  const [startTime, setStartTime] = react.useState<Date>({} as Date);\n  const [incorrectCount, setIncorrectCount] = react.useState<number>(0);\n  \n\n  const gameStateMap = new Map<string, ReactNode>();\n  gameStateMap.set('new_game', <NewGame />);\n  gameStateMap.set('in_game', <InGame />);\n  gameStateMap.set('end_game', <EndGame />);\n\n  const printGameState = () => {\n    // For the purposes of debugging\n    console.log(JSON.stringify(phrases));\n  }\n\n  return (\n    <>\n      <header>\n        <h1 onClick={printGameState}>\n          The Phrase Translation Memory Game\n        </h1>\n      </header>\n      <translationMemoryContext.Provider\n        value={{\n          currentPage, setCurrentPage,\n          phrases, setPhrases,\n          startTime, setStartTime,\n          incorrectCount, setIncorrectCount\n        }}>\n        <div id=\"game_state\">\n          {gameStateMap.get(currentPage)}\n        </div>\n      </translationMemoryContext.Provider>\n    </>\n\n  )\n}\n\nexport default TranslationMemory;"],"mappings":"iIAAA,MAAO,CAAAA,KAAK,KAAqB,OAAO,CAExC,MAAO,CAAAC,OAAO,KAAM,mBAAmB,CACvC,MAAO,CAAAC,MAAM,KAAM,iBAAiB,CACpC,MAAO,CAAAC,OAAO,KAAM,mBAAmB,CAEvC;AACA;AACA;AACA;AACA,GAJA,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,QAAA,IAAAC,SAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAiBA,MAAO,IAAM,CAAAC,wBAAwB,cAAGV,KAAK,CAACW,aAAa,CAAY,CAAC,CAAC,CAAC,CAE1E,GAAM,CAAAC,iBAAiB,CAAG,QAApB,CAAAA,iBAAiBA,CAAA,CAAS,CAE9B,IAAAC,eAAA,CAAsCb,KAAK,CAACc,QAAQ,CAAS,UAAU,CAAC,CAAAC,gBAAA,CAAAC,cAAA,CAAAH,eAAA,IAAjEI,WAAW,CAAAF,gBAAA,IAAEG,cAAc,CAAAH,gBAAA,IAClC,IAAAI,gBAAA,CAA8BnB,KAAK,CAACc,QAAQ,CAAW,EAAE,CAAC,CAAAM,gBAAA,CAAAJ,cAAA,CAAAG,gBAAA,IAAnDE,OAAO,CAAAD,gBAAA,IAAEE,UAAU,CAAAF,gBAAA,IAC1B,IAAAG,gBAAA,CAAkCvB,KAAK,CAACc,QAAQ,CAAO,CAAC,CAAC,CAAS,CAAAU,gBAAA,CAAAR,cAAA,CAAAO,gBAAA,IAA3DE,SAAS,CAAAD,gBAAA,IAAEE,YAAY,CAAAF,gBAAA,IAC9B,IAAAG,gBAAA,CAA4C3B,KAAK,CAACc,QAAQ,CAAS,CAAC,CAAC,CAAAc,gBAAA,CAAAZ,cAAA,CAAAW,gBAAA,IAA9DE,cAAc,CAAAD,gBAAA,IAAEE,iBAAiB,CAAAF,gBAAA,IAGxC,GAAM,CAAAG,YAAY,CAAG,GAAI,CAAAC,GAAG,EAAqB,CACjDD,YAAY,CAACE,GAAG,CAAC,UAAU,cAAE5B,IAAA,CAACF,OAAO,IAAG,CAAC,CACzC4B,YAAY,CAACE,GAAG,CAAC,SAAS,cAAE5B,IAAA,CAACH,MAAM,IAAG,CAAC,CACvC6B,YAAY,CAACE,GAAG,CAAC,UAAU,cAAE5B,IAAA,CAACJ,OAAO,IAAG,CAAC,CAEzC,GAAM,CAAAiC,cAAc,CAAG,QAAjB,CAAAA,cAAcA,CAAA,CAAS,CAC3B;AACAC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACjB,OAAO,CAAC,CAAC,CACtC,CAAC,CAED,mBACEZ,KAAA,CAAAF,SAAA,EAAAgC,QAAA,eACElC,IAAA,WAAAkC,QAAA,cACElC,IAAA,OAAImC,OAAO,CAAEN,cAAe,CAAAK,QAAA,CAAC,oCAE7B,EAAK,EACE,cACTlC,IAAA,CAACK,wBAAwB,CAAC+B,QAAQ,EAChCC,KAAK,CAAE,CACLzB,WAAW,CAAXA,WAAW,CAAEC,cAAc,CAAdA,cAAc,CAC3BG,OAAO,CAAPA,OAAO,CAAEC,UAAU,CAAVA,UAAU,CACnBG,SAAS,CAATA,SAAS,CAAEC,YAAY,CAAZA,YAAY,CACvBG,cAAc,CAAdA,cAAc,CAAEC,iBAAiB,CAAjBA,iBAClB,CAAE,CAAAS,QAAA,cACFlC,IAAA,QAAKsC,EAAE,CAAC,YAAY,CAAAJ,QAAA,CACjBR,YAAY,CAACa,GAAG,CAAC3B,WAAW,CAAC,EAC1B,EAC4B,GACnC,CAGP,CAAC,CAED,cAAe,CAAAL,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}