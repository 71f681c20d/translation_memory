{"ast":null,"code":"var _jsxFileName = \"/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/NewGame/DocumentUploader.tsx\",\n  _s = $RefreshSig$();\nimport Papa from \"papaparse\";\nimport React, { useContext } from \"react\";\nimport { translationMemoryContext } from \"../TranslationMemory\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DocumentUploader = () => {\n  _s();\n  const translationMemoryStore = useContext(translationMemoryContext);\n  const setPhrases = translationMemoryStore === null || translationMemoryStore === void 0 ? void 0 : translationMemoryStore.setPhrases;\n  const changeHandler = event => {\n    console.log(event.target.files[0]);\n    parseCsv(event);\n  };\n  const parseCsv = event => {\n    let phrases = [];\n    // Passing file data (event.target.files[0]) to parse using Papa.parse\n    Papa.parse(event.target.files[0], {\n      header: true,\n      skipEmptyLines: true,\n      complete: function (results) {\n        const allPhrases = results.data;\n        let filteredPhrases = [];\n        // filter allPhrases based on the 'included' field in the CSV; exclude if it says FALSE\n        for (let phrase of allPhrases) {\n          if (phrase.included != 'FALSE') {\n            debugger;\n            filteredPhrases.push(phrase);\n          }\n        }\n        console.log(filteredPhrases);\n        setPhrases ? setPhrases(filteredPhrases) : console.error('Unable to initialize uploaded phrases');\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        name: \"file\",\n        accept: \".csv\",\n        onChange: changeHandler,\n        style: {\n          display: \"block\",\n          margin: \"10px auto\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n_s(DocumentUploader, \"FXKKE26cj2AJzNfSVi+0MGgZEqI=\");\n_c = DocumentUploader;\nexport default DocumentUploader;\nvar _c;\n$RefreshReg$(_c, \"DocumentUploader\");","map":{"version":3,"names":["Papa","React","useContext","translationMemoryContext","jsxDEV","_jsxDEV","Fragment","_Fragment","DocumentUploader","_s","translationMemoryStore","setPhrases","changeHandler","event","console","log","target","files","parseCsv","phrases","parse","header","skipEmptyLines","complete","results","allPhrases","data","filteredPhrases","phrase","included","push","error","children","type","name","accept","onChange","style","display","margin","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alexander/Desktop/translation_memory/src/Elements/TranslationMemory/NewGame/DocumentUploader.tsx"],"sourcesContent":["import Papa from \"papaparse\";\nimport React, { useContext } from \"react\";\nimport Phrase from \"../../../Models/Phrase\";\nimport { translationMemoryContext } from \"../TranslationMemory\";\n\n\nconst DocumentUploader = () => {\n\n  const translationMemoryStore = useContext(translationMemoryContext);\n  const setPhrases = translationMemoryStore?.setPhrases;\n\n  const changeHandler = (event: any) => {\n    console.log(event.target.files[0]);\n    parseCsv(event);\n  };\n\n  const parseCsv = (event: any) => {\n    let phrases: Phrase[] = [];\n    // Passing file data (event.target.files[0]) to parse using Papa.parse\n    Papa.parse(event.target.files[0], {\n      header: true,\n      skipEmptyLines: true,\n      complete: function (results: { data: any; }) {\n        const allPhrases: Phrase[] = results.data;\n        let filteredPhrases: Phrase[] = [];\n        // filter allPhrases based on the 'included' field in the CSV; exclude if it says FALSE\n        for(let phrase of allPhrases){\n          if(phrase.included != 'FALSE'){\n            debugger;\n            filteredPhrases.push(phrase);\n          }\n        }\n        console.log(filteredPhrases);\n        setPhrases? setPhrases(filteredPhrases): console.error('Unable to initialize uploaded phrases');\n      },\n    });\n  }\n\n\n  return (\n    <>\n    <div>\n    <input\n          type=\"file\"\n          name=\"file\"\n          accept=\".csv\"\n          onChange={changeHandler}\n          style={{ display: \"block\", margin: \"10px auto\" }}\n        />\n    </div>\n    </>\n  )\n}\n\nexport default DocumentUploader;"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,WAAW;AAC5B,OAAOC,KAAK,IAAIC,UAAU,QAAQ,OAAO;AAEzC,SAASC,wBAAwB,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAGhE,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE7B,MAAMC,sBAAsB,GAAGR,UAAU,CAACC,wBAAwB,CAAC;EACnE,MAAMQ,UAAU,GAAGD,sBAAsB,aAAtBA,sBAAsB,uBAAtBA,sBAAsB,CAAEC,UAAU;EAErD,MAAMC,aAAa,GAAIC,KAAU,IAAK;IACpCC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IAClCC,QAAQ,CAACL,KAAK,CAAC;EACjB,CAAC;EAED,MAAMK,QAAQ,GAAIL,KAAU,IAAK;IAC/B,IAAIM,OAAiB,GAAG,EAAE;IAC1B;IACAnB,IAAI,CAACoB,KAAK,CAACP,KAAK,CAACG,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE;MAChCI,MAAM,EAAE,IAAI;MACZC,cAAc,EAAE,IAAI;MACpBC,QAAQ,EAAE,SAAAA,CAAUC,OAAuB,EAAE;QAC3C,MAAMC,UAAoB,GAAGD,OAAO,CAACE,IAAI;QACzC,IAAIC,eAAyB,GAAG,EAAE;QAClC;QACA,KAAI,IAAIC,MAAM,IAAIH,UAAU,EAAC;UAC3B,IAAGG,MAAM,CAACC,QAAQ,IAAI,OAAO,EAAC;YAC5B;YACAF,eAAe,CAACG,IAAI,CAACF,MAAM,CAAC;UAC9B;QACF;QACAd,OAAO,CAACC,GAAG,CAACY,eAAe,CAAC;QAC5BhB,UAAU,GAAEA,UAAU,CAACgB,eAAe,CAAC,GAAEb,OAAO,CAACiB,KAAK,CAAC,uCAAuC,CAAC;MACjG;IACF,CAAC,CAAC;EACJ,CAAC;EAGD,oBACE1B,OAAA,CAAAE,SAAA;IAAAyB,QAAA,eACA3B,OAAA;MAAA2B,QAAA,eACA3B,OAAA;QACM4B,IAAI,EAAC,MAAM;QACXC,IAAI,EAAC,MAAM;QACXC,MAAM,EAAC,MAAM;QACbC,QAAQ,EAAExB,aAAc;QACxByB,KAAK,EAAE;UAAEC,OAAO,EAAE,OAAO;UAAEC,MAAM,EAAE;QAAY;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACjD;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACA,iBACH;AAEP,CAAC;AAAAlC,EAAA,CA9CKD,gBAAgB;AAAAoC,EAAA,GAAhBpC,gBAAgB;AAgDtB,eAAeA,gBAAgB;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}